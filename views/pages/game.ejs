<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
</head>
<body>

<% include ../partials/nav.ejs %>

<div class="container">

  <div class="row" id="pre-game">
    Choose your avatar:
    <img class="avatar" src='avatars_0001.png' />
    <img class="avatar" src='avatars_0002.png' />
    <img class="avatar" src='avatars_0003.png' />
    <img class="avatar" src='avatars_0004.png' />
    <img class="avatar" src='avatars_0005.png' />
    <hr>
    Enter your username:
    <input type="text" class="autocomplete" id="username" placeholder="username">
    <hr>
    <img class="avatar" id="empty-avatar" src='' />
    <h6>YOUR FLEET [ <span id="empty-you"></span> ]</h6>
    <hr>
    <button id="start-game">start new game</button>
  </div>

  <div class="row" id="setup-game">
    <h2>Current Game</h2>

    <div class="col-md-8">
        
        <img class="avatar" id="player-avatar" src='' />
        <h6>YOUR FLEET [ <span id="you"></span> ]</h6>
        <canvas id="your-grid" class="grid" ></canvas>
    </div>

    <div class="col-md-4">

        <h2>Ships</h2>
        <button id="place-ships">place your ships</button>
        <div id="ship-container">
            <hr>
            <p>Click on each ship to place on grid: </p>
            <div id="ship-object"></div>
        </div>

    </div>
  </div>

  <div class="row" id="play-game">
    <div class="col-md-8">
        <img class="avatar" id="enemy-avatar" src='' />
        <h6>ENEMY FLEET [ <span id="enemy"></span> ]</h6>
        <canvas id="enemy-grid" class="grid" ></canvas>
    </div>
  </div>


  </div>
</div>

<footer>
<p id='time-stamp'></p>
</footer>

<script type="text/javascript">
"use strict";


const HEIGHT = 600;
const WIDTH = 600;
const GRID = 10;
const cellDim = HEIGHT / GRID;

$().ready(function() {

    var socket = io.connect();
    var playerGrid = $("#your-grid");
    var enemyGrid = $("#enemy-grid");

    $("#setup-game").hide();
    $("#play-game").hide();

    socket.on('time', function(timeString) {
        $('#time-stamp').html('current time: ' + timeString);
    });

    // starting new game
    $(".autocomplete").on('change', function() {
        let text = this.value;
        $("#empty-you").html(text);
    });
    $(".avatar").on('click', function() {
        let src = this.src;
        $("#empty-avatar").attr('src', src);
    });
    $("#start-game").on('click', function() {
        $("#pre-game").hide();
        $("#setup-game").show();
        let userProfile = {
            username: $("#username").val(),
            avatar: $("#empty-avatar").attr('src')
        };
        socket.emit('newgame', userProfile);
    });

    // players are initialized, game is started
    const PLAYERS = {};
    socket.on('waiting', function(data) {
        PLAYERS['you'] = data['0'];
        console.log("Waiting for a second player to join...");
    });
    socket.on('alert', function(data) {
        if(PLAYERS['you']) {
            PLAYERS['enemy'] = data['1'];          
        } else {
            PLAYERS['you'] = data['1'];
            PLAYERS['enemy'] = data['0'];
        }
        console.log(PLAYERS);
        console.log("Playing!");
        drawProfiles(PLAYERS);
        drawGrid(playerGrid);
    });


    // users place ships on grid

    socket.on('ships', function(data) {
        $("#ship-object").html(data);
    });
    $("body").on('click', ".ship-image", function() {
        let code = this.id;
        console.log(this.id);
        let x = prompt("Please enter column coordinate: ", "1-10");
        x = x - 1;
        let y = prompt("Please enter row coordinate: ", "A-J");
        y = y.toUpperCase();
        y = y.charCodeAt(0) - 65;
        let d = prompt("Please enter a direction: ", "right or down");
        drawShip(playerGrid,x,y,d,code.length);
        socket.emit('place', {
            id: PLAYERS['you'].id,
            ship: code,
            column: x,
            row: y,
            direction: d
        });
    });

    // ships placed, ready to play!
    $("#place-ships").on('click', function() {
        socket.emit('setup');
        $("#ship-container").show();
        drawGrid(enemyGrid);
    });

    // users fire missiles


});





// draws user profile
function drawProfiles(userProfiles) {
    $("#you").html(userProfiles['you'].username);
    $("#player-avatar").attr('src',userProfiles['you'].avatar);
    $("#enemy").html(userProfiles['enemy'].username);
    $("#enemy-avatar").attr('src',userProfiles['enemy'].avatar);

}

const rowLabels = ['A','B','C','D','E','F','G','H','I','J'];
const columnLabels = ['1','2','3','4','5','6','7','8','9','10'];



// draws battleship grid
function drawGrid(playerGrid) {
    let ctx = playerGrid[0].getContext('2d');
    ctx.canvas.height = HEIGHT;
    ctx.canvas.width = WIDTH;

    ctx.strokeStyle = "#03AFCA";
    ctx.lineWidth = 0.5;

    ctx.font = "20px courier";
    ctx.textAlign = "center";
    ctx.textBaseline = "hanging";
    ctx.fillStyle = "#AEAEAE";
    for (let i = 0; i < rowLabels.length; i++) {
        for (let j = 0; j < columnLabels.length; j++) {
            ctx.fillText(rowLabels[i]+columnLabels[j],(j*cellDim)+(cellDim/2),(i*cellDim)+(cellDim/2));
        }
    }

    for (let i = 0; i <= HEIGHT; i += cellDim) {
        ctx.beginPath();
        ctx.moveTo(i,0);
        ctx.lineTo(i,HEIGHT);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(0,i);
        ctx.lineTo(WIDTH,i);
        ctx.stroke();
    }
}

// draws ship on grid
function drawShip(playerGrid,x,y,d,l) {
    let ctx = playerGrid[0].getContext('2d');
    let width = cellDim;
    let height = cellDim;
    if (d === "right") {
        width = l*cellDim;
    } else if (d === "down") {
        height = l*cellDim;
    }
    ctx.fillStyle="rgba(30,200,30,0.2)";
    ctx.fillRect(x*cellDim,y*cellDim,width,height);
}


</script>

</body>
</html>